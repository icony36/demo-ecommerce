{"version":3,"file":"static/webpack/static/development/pages/checkout.js.9b24806ea62cb34b1d84.hot-update.js","sources":["webpack:///./pages/checkout.js"],"sourcesContent":["import React, { useState, useContext } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Stepper from \"@material-ui/core/Stepper\";\nimport Step from \"@material-ui/core/Step\";\nimport StepLabel from \"@material-ui/core/StepLabel\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CheckoutCart from \"../components/checkout/CheckoutCart\";\nimport Billing from \"../components/checkout/Billing\";\nimport Payment from \"../components/checkout/Payment\";\nimport Confirm from \"../components/checkout/Confirm\";\nimport CheckoutStyles from \"../styles/CheckoutStyles\";\nimport { ShopContext } from \"../contexts/ShopContext\";\nimport useInputState from \"../hooks/useInputState\";\nimport {\n    formatCreditCardNumber,\n    formatCVC,\n    formatExpirationDate\n} from \"../components/checkout/CardFormat\";\nimport axios from \"axios\";\n\nconst useStyles = makeStyles(CheckoutStyles);\n\nconst initCheckout = {\n    country: \"\",\n    city: \"\",\n    zipcode: \"\",\n    address: \"\",\n    name: \"\",\n    companyName: \"\",\n    phone: \"\",\n    email: \"\",\n    cardType: \"\",\n    cardNum: \"\",\n    cardName: \"\",\n    cvc: \"\",\n    expiry: \"\"\n};\n\nconst steps = [\n    \"Shopping Cart\",\n    \"Billing & Shipping Method\",\n    \"Payment Method\",\n    \"Confirm Order\"\n];\n\nconst Checkout = () => {\n    const classes = useStyles();\n\n    const { cart, totalItems, totalAmounts, removeFromCart } = useContext(\n        ShopContext\n    );\n\n    const [activeStep, setActiveStep] = useState(0);\n    const [selected, setSelected] = useState(\n        cart.length > 0 ? cart.map(el => el.id) : []\n    );\n    const [checkoutInput, setCheckoutInput] = useInputState(initCheckout);\n\n    // Stepper function\n    const handleNext = () => {\n        setActiveStep(prevActiveStep => prevActiveStep + 1);\n    };\n\n    const handleBack = () => {\n        setActiveStep(prevActiveStep => prevActiveStep - 1);\n    };\n\n    const handleReset = () => {\n        setActiveStep(0);\n    };\n\n    //CheckoutCart function\n    const handleSelectAllClick = event => {\n        if (event.target.checked) {\n            setSelected(cart.map(el => el.id));\n            return;\n        }\n        setSelected([]);\n    };\n\n    const handleClick = (event, id) => {\n        const selectedIndex = selected.indexOf(id);\n\n        let newSelected = [];\n\n        if (selectedIndex === -1) {\n            newSelected = newSelected.concat(selected, id);\n        } else if (selectedIndex === 0) {\n            newSelected = newSelected.concat(selected.slice(1));\n        } else if (selectedIndex === selected.length - 1) {\n            newSelected = newSelected.concat(selected.slice(0, -1));\n        } else if (selectedIndex > 0) {\n            newSelected = newSelected.concat(\n                selected.slice(0, selectedIndex),\n                selected.slice(selectedIndex + 1)\n            );\n        }\n\n        setSelected(newSelected);\n        console.log(selected);\n    };\n\n    const removeFromSelected = id => {\n        let index = selected.findIndex(el => el == id);\n        selected.splice(index, 1);\n        setSelected(selected);\n    };\n\n    const handleRemove = id => {\n        removeFromCart(id);\n        removeFromSelected(id);\n    };\n\n    const handleRemoveBundle = idArr => {\n        idArr.forEach(el => {\n            removeFromCart(el);\n            removeFromSelected(el);\n        });\n    };\n\n    const selectedItems = cart.filter(el => selected.includes(el.id));\n\n    // Payment function\n    const handleCardInput = evt => {\n        if (evt.target.name === \"cardNum\") {\n            evt.target.value = formatCreditCardNumber(evt.target.value);\n            setCheckoutInput(evt);\n        } else if (evt.target.name === \"expiry\") {\n            evt.target.value = formatExpirationDate(evt.target.value);\n            setCheckoutInput(evt);\n        } else if (evt.target.name === \"cvc\") {\n            evt.target.value = formatCVC(evt.target.value);\n            setCheckoutInput(evt);\n        }\n    };\n\n    // Place Order\n    const handleSubmit = evt => {\n        evt.preventDefault();\n\n        const {\n            country,\n            city,\n            zipcode,\n            address,\n            name,\n            companyName,\n            phone,\n            email,\n            cardNum\n        } = checkoutInput;\n\n        const last4CardNum = cardNum.toString().substr(-4);\n\n        // axios\n        //     .post(\"/checkout\", {\n        //         country,\n        //         city,\n        //         zipcode,\n        //         address,\n        //         name,\n        //         companyName,\n        //         phone,\n        //         email,\n        //         last4CardNum,\n        //         items\n        //     })\n        //     .then(res => {\n        //         console.log(\"Order is sent!: \" + res.status);\n        //     })\n        //     .catch(err => {\n        //         console.log(err, \"Can't submit order!\");\n        //     });\n        alert(\n            `${country},\n            ${city},\n            ${zipcode},\n            ${address},\n            ${name},\n            ${companyName},\n            ${phone},\n            ${email},\n            ${cardNum},\n            ${items}`\n        );\n        handleNext();\n    };\n\n    const getStepContent = step => {\n        switch (step) {\n            case 0:\n                return (\n                    <CheckoutCart\n                        selected={selected}\n                        handleSelectAllClick={handleSelectAllClick}\n                        handleClick={handleClick}\n                        handleRemove={handleRemove}\n                    />\n                );\n            case 1:\n                return (\n                    <Billing\n                        checkoutInput={checkoutInput}\n                        setCheckoutInput={setCheckoutInput}\n                    />\n                );\n            case 2:\n                return (\n                    <Payment\n                        checkoutInput={checkoutInput}\n                        setCheckoutInput={setCheckoutInput}\n                        handleCardInput={handleCardInput}\n                    />\n                );\n            case 3:\n                return (\n                    <Confirm\n                        checkoutInput={checkoutInput}\n                        selected={selected}\n                        isPaid={false}\n                        selectedItems={selectedItems}\n                        handleReset={handleReset}\n                    />\n                );\n            default:\n                return \"Unknown step\";\n        }\n    };\n\n    return (\n        <React.Fragment>\n            <Container>\n                <Typography className={classes.title} variant=\"h5\">\n                    Checkout\n                </Typography>\n                <Stepper activeStep={activeStep}>\n                    {steps.map((label, index) => (\n                        <Step key={index}>\n                            <StepLabel\n                                StepIconProps={{\n                                    classes: {\n                                        completed: classes.icon,\n                                        active: classes.icon\n                                    }\n                                }}\n                            >\n                                {label}\n                            </StepLabel>\n                        </Step>\n                    ))}\n                </Stepper>\n                <Paper elevation={0} className={classes.paper}>\n                    {activeStep === steps.length ? (\n                        <Confirm\n                            checkoutInput={checkoutInput}\n                            selected={selected}\n                            isPaid={true}\n                            handleReset={handleReset}\n                            selectedItems={selectedItems}\n                        />\n                    ) : (\n                        <React.Fragment>\n                            {getStepContent(activeStep)}\n                            <div>\n                                {activeStep === steps.length - 1 ? (\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"secondary\"\n                                        className={classes.btnNext}\n                                        onClick={handleSubmit}\n                                    >\n                                        Place Order\n                                    </Button>\n                                ) : (\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"secondary\"\n                                        onClick={handleNext}\n                                        className={classes.btnNext}\n                                    >\n                                        Next\n                                    </Button>\n                                )}\n\n                                <Button\n                                    disabled={activeStep === 0}\n                                    onClick={handleBack}\n                                    className={classes.btnBack}\n                                >\n                                    Back\n                                </Button>\n                            </div>\n                        </React.Fragment>\n                    )}\n                </Paper>\n            </Container>\n        </React.Fragment>\n    );\n};\n\nexport default Checkout;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAgBA;AACA;AAMA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AASA;AAAA;AATA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AAYA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AAEA;AACA;AAFA;AACA;AAIA;AACA;AAEA;AACA;AACA;AAHA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AApCA;AAsCA;AACA;AACA;AAGA;AAAA;AAAA;AAGA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAFA;AADA;AADA;AAFA;AAeA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AALA;AAaA;AACA;AACA;AACA;AAJA;AAUA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AAHA;AAcA;AACA;AACA;;;;A","sourceRoot":""}