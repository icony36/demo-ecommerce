{"ast":null,"code":"import React, { useState, useContext } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Stepper from \"@material-ui/core/Stepper\";\nimport Step from \"@material-ui/core/Step\";\nimport StepLabel from \"@material-ui/core/StepLabel\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CheckoutCart from \"../components/checkout/CheckoutCart\";\nimport Billing from \"../components/checkout/Billing\";\nimport Payment from \"../components/checkout/Payment\";\nimport Confirm from \"../components/checkout/Confirm\";\nimport CheckoutStyles from \"../styles/CheckoutStyles\";\nimport { ShopContext } from \"../contexts/ShopContext\";\nimport useInputState from \"../hooks/useInputState\";\nimport { formatCreditCardNumber, formatCVC, formatExpirationDate } from \"../components/checkout/CardFormat\";\nimport axios from \"axios\";\nconst useStyles = makeStyles(CheckoutStyles);\nconst initCheckout = {\n  country: \"\",\n  city: \"\",\n  zipcode: \"\",\n  address: \"\",\n  name: \"\",\n  companyName: \"\",\n  phone: \"\",\n  email: \"\",\n  cardType: \"\",\n  cardNum: \"\",\n  cardName: \"\",\n  cvc: \"\",\n  expiry: \"\",\n  items: []\n};\nconst steps = [\"Shopping Cart\", \"Billing & Shipping Method\", \"Payment Method\", \"Confirm Order\"];\n\nconst Checkout = () => {\n  function getStepContent(step) {\n    switch (step) {\n      case 0:\n        return React.createElement(CheckoutCart, {\n          selected: selected,\n          handleSelectAllClick: handleSelectAllClick,\n          handleClick: handleClick,\n          handleRemove: handleRemove\n        });\n\n      case 1:\n        return React.createElement(Billing, {\n          checkoutInput: checkoutInput,\n          setCheckoutInput: setCheckoutInput\n        });\n\n      case 2:\n        return React.createElement(Payment, {\n          checkoutInput: checkoutInput,\n          setCheckoutInput: setCheckoutInput,\n          handleCardInput: handleCardInput\n        });\n\n      case 3:\n        return React.createElement(Confirm, null);\n\n      default:\n        return \"Unknown step\";\n    }\n  }\n\n  const classes = useStyles();\n  const [activeStep, setActiveStep] = useState(0);\n  const {\n    cart,\n    totalItems,\n    totalAmounts,\n    removeFromCart\n  } = useContext(ShopContext);\n  const [checkoutInput, setCheckoutInput] = useInputState(initCheckout);\n  const [selected, setSelected] = useState(cart.length > 0 ? cart.map(el => el.id) : []); // Stepper function\n\n  function handleNext() {\n    setActiveStep(prevActiveStep => prevActiveStep + 1);\n  }\n\n  function handleBack() {\n    setActiveStep(prevActiveStep => prevActiveStep - 1);\n  }\n\n  function handleReset() {\n    setActiveStep(0);\n  } //CheckoutCart function\n\n\n  const handleSelectAllClick = event => {\n    if (event.target.checked) {\n      setSelected(cart.map(el => el.id));\n      return;\n    }\n\n    setSelected([]);\n  };\n\n  const handleClick = (event, id) => {\n    const selectedIndex = selected.indexOf(id);\n    let newSelected = [];\n\n    if (selectedIndex === -1) {\n      newSelected = newSelected.concat(selected, id);\n    } else if (selectedIndex === 0) {\n      newSelected = newSelected.concat(selected.slice(1));\n    } else if (selectedIndex === selected.length - 1) {\n      newSelected = newSelected.concat(selected.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelected = newSelected.concat(selected.slice(0, selectedIndex), selected.slice(selectedIndex + 1));\n    }\n\n    setSelected(newSelected);\n    console.log(selected);\n  };\n\n  const removeFromSelected = id => {\n    let index = selected.findIndex(el => el == id);\n    selected.splice(index, 1);\n    setSelected(selected);\n  };\n\n  const handleRemove = id => {\n    removeFromCart(id);\n    removeFromSelected(id);\n  };\n\n  const handleRemoveBundle = idArr => {\n    idArr.forEach(el => {\n      removeFromCart(el);\n      removeFromSelected(el);\n    });\n  }; // Payment function\n\n\n  const handleCardInput = evt => {\n    if (evt.target.name === \"cardNum\") {\n      evt.target.value = formatCreditCardNumber(evt.target.value);\n      setCheckoutInput(evt);\n    } else if (evt.target.name === \"expiry\") {\n      evt.target.value = formatExpirationDate(evt.target.value);\n      setCheckoutInput(evt);\n    } else if (evt.target.name === \"cvc\") {\n      evt.target.value = formatCVC(evt.target.value);\n      setCheckoutInput(evt);\n    }\n  }; // Submit Checkout\n\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    const {\n      country,\n      city,\n      zipcode,\n      address,\n      name,\n      companyName,\n      phone,\n      email,\n      cardNum,\n      items\n    } = checkoutInput; // axios\n    //     .post(\"/checkout\", {\n    //         country,\n    //         city,\n    //         zipcode,\n    //         address,\n    //         name,\n    //         companyName,\n    //         phone,\n    //         email,\n    //         cardNum,\n    //         items\n    //     })\n    //     .then(res => {\n    //         console.log(\"Order is sent!: \" + res.status);\n    //     })\n    //     .catch(err => {\n    //         console.log(err, \"Can't submit order!\");\n    //     });\n\n    alert(`${country},\n            ${city},\n            ${zipcode},\n            ${address},\n            ${name},\n            ${companyName},\n            ${phone},\n            ${email},\n            ${cardNum},\n            ${items}`);\n    handleNext();\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(Container, null, React.createElement(Typography, {\n    className: classes.title,\n    variant: \"h5\"\n  }, \"Checkout\"), React.createElement(Stepper, {\n    activeStep: activeStep\n  }, steps.map((label, index) => React.createElement(Step, {\n    key: index\n  }, React.createElement(StepLabel, {\n    StepIconProps: {\n      classes: {\n        completed: classes.icon,\n        active: classes.icon\n      }\n    }\n  }, label)))), React.createElement(Paper, {\n    elevation: 0,\n    className: classes.paper\n  }, activeStep === steps.length ? React.createElement(\"div\", null, React.createElement(Typography, {\n    className: classes.instructions\n  }, \"All steps completed - you're finished\"), React.createElement(Button, {\n    onClick: handleReset,\n    className: classes.btnReset\n  }, \"Reset\")) : React.createElement(React.Fragment, null, getStepContent(activeStep), React.createElement(\"div\", null, activeStep === steps.length - 1 ? React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    className: classes.btnNext,\n    onClick: handleSubmit\n  }, \"Finish\") : React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: handleNext,\n    className: classes.btnNext\n  }, \"Next\"), React.createElement(Button, {\n    disabled: activeStep === 0,\n    onClick: handleBack,\n    className: classes.btnBack\n  }, \"Back\"))))));\n};\n\nexport default Checkout;","map":{"version":3,"sources":["/Users/iantan/Desktop/Two-Halves-Sucre/source-code/pages/checkout.js"],"names":["React","useState","useContext","makeStyles","Container","Paper","Stepper","Step","StepLabel","Button","Typography","CheckoutCart","Billing","Payment","Confirm","CheckoutStyles","ShopContext","useInputState","formatCreditCardNumber","formatCVC","formatExpirationDate","axios","useStyles","initCheckout","country","city","zipcode","address","name","companyName","phone","email","cardType","cardNum","cardName","cvc","expiry","items","steps","Checkout","getStepContent","step","selected","handleSelectAllClick","handleClick","handleRemove","checkoutInput","setCheckoutInput","handleCardInput","classes","activeStep","setActiveStep","cart","totalItems","totalAmounts","removeFromCart","setSelected","length","map","el","id","handleNext","prevActiveStep","handleBack","handleReset","event","target","checked","selectedIndex","indexOf","newSelected","concat","slice","console","log","removeFromSelected","index","findIndex","splice","handleRemoveBundle","idArr","forEach","evt","value","handleSubmit","preventDefault","alert","title","label","completed","icon","active","paper","instructions","btnReset","btnNext","btnBack"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Stepper from \"@material-ui/core/Stepper\";\nimport Step from \"@material-ui/core/Step\";\nimport StepLabel from \"@material-ui/core/StepLabel\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CheckoutCart from \"../components/checkout/CheckoutCart\";\nimport Billing from \"../components/checkout/Billing\";\nimport Payment from \"../components/checkout/Payment\";\nimport Confirm from \"../components/checkout/Confirm\";\nimport CheckoutStyles from \"../styles/CheckoutStyles\";\nimport { ShopContext } from \"../contexts/ShopContext\";\nimport useInputState from \"../hooks/useInputState\";\nimport {\n    formatCreditCardNumber,\n    formatCVC,\n    formatExpirationDate\n} from \"../components/checkout/CardFormat\";\nimport axios from \"axios\";\n\nconst useStyles = makeStyles(CheckoutStyles);\n\nconst initCheckout = {\n    country: \"\",\n    city: \"\",\n    zipcode: \"\",\n    address: \"\",\n    name: \"\",\n    companyName: \"\",\n    phone: \"\",\n    email: \"\",\n    cardType: \"\",\n    cardNum: \"\",\n    cardName: \"\",\n    cvc: \"\",\n    expiry: \"\",\n    items: []\n};\n\nconst steps = [\n    \"Shopping Cart\",\n    \"Billing & Shipping Method\",\n    \"Payment Method\",\n    \"Confirm Order\"\n];\n\nconst Checkout = () => {\n    function getStepContent(step) {\n        switch (step) {\n            case 0:\n                return (\n                    <CheckoutCart\n                        selected={selected}\n                        handleSelectAllClick={handleSelectAllClick}\n                        handleClick={handleClick}\n                        handleRemove={handleRemove}\n                    />\n                );\n            case 1:\n                return (\n                    <Billing\n                        checkoutInput={checkoutInput}\n                        setCheckoutInput={setCheckoutInput}\n                    />\n                );\n            case 2:\n                return (\n                    <Payment\n                        checkoutInput={checkoutInput}\n                        setCheckoutInput={setCheckoutInput}\n                        handleCardInput={handleCardInput}\n                    />\n                );\n            case 3:\n                return <Confirm />;\n            default:\n                return \"Unknown step\";\n        }\n    }\n\n    const classes = useStyles();\n    const [activeStep, setActiveStep] = useState(0);\n\n    const { cart, totalItems, totalAmounts, removeFromCart } = useContext(\n        ShopContext\n    );\n    const [checkoutInput, setCheckoutInput] = useInputState(initCheckout);\n\n    const [selected, setSelected] = useState(\n        cart.length > 0 ? cart.map(el => el.id) : []\n    );\n\n    // Stepper function\n    function handleNext() {\n        setActiveStep(prevActiveStep => prevActiveStep + 1);\n    }\n\n    function handleBack() {\n        setActiveStep(prevActiveStep => prevActiveStep - 1);\n    }\n\n    function handleReset() {\n        setActiveStep(0);\n    }\n\n    //CheckoutCart function\n    const handleSelectAllClick = event => {\n        if (event.target.checked) {\n            setSelected(cart.map(el => el.id));\n            return;\n        }\n        setSelected([]);\n    };\n\n    const handleClick = (event, id) => {\n        const selectedIndex = selected.indexOf(id);\n\n        let newSelected = [];\n\n        if (selectedIndex === -1) {\n            newSelected = newSelected.concat(selected, id);\n        } else if (selectedIndex === 0) {\n            newSelected = newSelected.concat(selected.slice(1));\n        } else if (selectedIndex === selected.length - 1) {\n            newSelected = newSelected.concat(selected.slice(0, -1));\n        } else if (selectedIndex > 0) {\n            newSelected = newSelected.concat(\n                selected.slice(0, selectedIndex),\n                selected.slice(selectedIndex + 1)\n            );\n        }\n\n        setSelected(newSelected);\n        console.log(selected);\n    };\n\n    const removeFromSelected = id => {\n        let index = selected.findIndex(el => el == id);\n        selected.splice(index, 1);\n        setSelected(selected);\n    };\n\n    const handleRemove = id => {\n        removeFromCart(id);\n        removeFromSelected(id);\n    };\n\n    const handleRemoveBundle = idArr => {\n        idArr.forEach(el => {\n            removeFromCart(el);\n            removeFromSelected(el);\n        });\n    };\n\n    // Payment function\n    const handleCardInput = evt => {\n        if (evt.target.name === \"cardNum\") {\n            evt.target.value = formatCreditCardNumber(evt.target.value);\n            setCheckoutInput(evt);\n        } else if (evt.target.name === \"expiry\") {\n            evt.target.value = formatExpirationDate(evt.target.value);\n            setCheckoutInput(evt);\n        } else if (evt.target.name === \"cvc\") {\n            evt.target.value = formatCVC(evt.target.value);\n            setCheckoutInput(evt);\n        }\n    };\n\n    // Submit Checkout\n    const handleSubmit = evt => {\n        evt.preventDefault();\n\n        const {\n            country,\n            city,\n            zipcode,\n            address,\n            name,\n            companyName,\n            phone,\n            email,\n            cardNum,\n            items\n        } = checkoutInput;\n        // axios\n        //     .post(\"/checkout\", {\n        //         country,\n        //         city,\n        //         zipcode,\n        //         address,\n        //         name,\n        //         companyName,\n        //         phone,\n        //         email,\n        //         cardNum,\n        //         items\n        //     })\n        //     .then(res => {\n        //         console.log(\"Order is sent!: \" + res.status);\n        //     })\n        //     .catch(err => {\n        //         console.log(err, \"Can't submit order!\");\n        //     });\n        alert(\n            `${country},\n            ${city},\n            ${zipcode},\n            ${address},\n            ${name},\n            ${companyName},\n            ${phone},\n            ${email},\n            ${cardNum},\n            ${items}`\n        );\n        handleNext();\n    };\n\n    return (\n        <React.Fragment>\n            <Container>\n                <Typography className={classes.title} variant=\"h5\">\n                    Checkout\n                </Typography>\n                <Stepper activeStep={activeStep}>\n                    {steps.map((label, index) => (\n                        <Step key={index}>\n                            <StepLabel\n                                StepIconProps={{\n                                    classes: {\n                                        completed: classes.icon,\n                                        active: classes.icon\n                                    }\n                                }}\n                            >\n                                {label}\n                            </StepLabel>\n                        </Step>\n                    ))}\n                </Stepper>\n                <Paper elevation={0} className={classes.paper}>\n                    {activeStep === steps.length ? (\n                        <div>\n                            <Typography className={classes.instructions}>\n                                All steps completed - you&apos;re finished\n                            </Typography>\n                            <Button\n                                onClick={handleReset}\n                                className={classes.btnReset}\n                            >\n                                Reset\n                            </Button>\n                        </div>\n                    ) : (\n                        <React.Fragment>\n                            {getStepContent(activeStep)}\n                            <div>\n                                {activeStep === steps.length - 1 ? (\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"secondary\"\n                                        className={classes.btnNext}\n                                        onClick={handleSubmit}\n                                    >\n                                        Finish\n                                    </Button>\n                                ) : (\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"secondary\"\n                                        onClick={handleNext}\n                                        className={classes.btnNext}\n                                    >\n                                        Next\n                                    </Button>\n                                )}\n\n                                <Button\n                                    disabled={activeStep === 0}\n                                    onClick={handleBack}\n                                    className={classes.btnBack}\n                                >\n                                    Back\n                                </Button>\n                            </div>\n                        </React.Fragment>\n                    )}\n                </Paper>\n            </Container>\n        </React.Fragment>\n    );\n};\n\nexport default Checkout;\n"]},"metadata":{},"sourceType":"module"}