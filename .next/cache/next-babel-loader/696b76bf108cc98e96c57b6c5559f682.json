{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport Payment from \"payment\";\n\nfunction clearNumber() {\n  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  return value.replace(/\\D+/g, \"\");\n}\n\nexport function formatCreditCardNumber(value) {\n  if (!value) {\n    return value;\n  }\n\n  var issuer = Payment.fns.cardType(value);\n  var clearValue = clearNumber(value);\n  var nextValue;\n\n  switch (issuer) {\n    case \"amex\":\n      nextValue = \"\".concat(clearValue.slice(0, 4), \" \").concat(clearValue.slice(4, 10), \" \").concat(clearValue.slice(10, 15));\n      break;\n\n    case \"dinersclub\":\n      nextValue = \"\".concat(clearValue.slice(0, 4), \" \").concat(clearValue.slice(4, 10), \" \").concat(clearValue.slice(10, 14));\n      break;\n\n    default:\n      nextValue = \"\".concat(clearValue.slice(0, 4), \" \").concat(clearValue.slice(4, 8), \" \").concat(clearValue.slice(8, 12), \" \").concat(clearValue.slice(12, 19));\n      break;\n  }\n\n  return nextValue.trim();\n}\nexport function formatCVC(value, prevValue) {\n  var allValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var clearValue = clearNumber(value);\n  var maxLength = 4;\n\n  if (allValues.number) {\n    var issuer = Payment.fns.cardType(allValues.number);\n    maxLength = issuer === \"amex\" ? 4 : 3;\n  }\n\n  return clearValue.slice(0, maxLength);\n}\nexport function formatExpirationDate(value) {\n  var clearValue = clearNumber(value);\n\n  if (clearValue.length >= 3) {\n    return \"\".concat(clearValue.slice(0, 2), \"/\").concat(clearValue.slice(2, 4));\n  }\n\n  return clearValue;\n}\nexport function formatFormData(data) {\n  return _Object$keys(data).map(function (d) {\n    return \"\".concat(d, \": \").concat(data[d]);\n  });\n}","map":{"version":3,"sources":["/Users/iantan/Desktop/Two-Halves-Sucre/source-code/components/checkout/utils.js"],"names":["Payment","clearNumber","value","replace","formatCreditCardNumber","issuer","fns","cardType","clearValue","nextValue","slice","trim","formatCVC","prevValue","allValues","maxLength","number","formatExpirationDate","length","formatFormData","data","map","d"],"mappings":";AAAA,OAAOA,OAAP,MAAoB,SAApB;;AAEA,SAASC,WAAT,GAAiC;AAAA,MAAZC,KAAY,uEAAJ,EAAI;AAC7B,SAAOA,KAAK,CAACC,OAAN,CAAc,MAAd,EAAsB,EAAtB,CAAP;AACH;;AAED,OAAO,SAASC,sBAAT,CAAgCF,KAAhC,EAAuC;AAC1C,MAAI,CAACA,KAAL,EAAY;AACR,WAAOA,KAAP;AACH;;AAED,MAAMG,MAAM,GAAGL,OAAO,CAACM,GAAR,CAAYC,QAAZ,CAAqBL,KAArB,CAAf;AACA,MAAMM,UAAU,GAAGP,WAAW,CAACC,KAAD,CAA9B;AACA,MAAIO,SAAJ;;AAEA,UAAQJ,MAAR;AACI,SAAK,MAAL;AACII,MAAAA,SAAS,aAAMD,UAAU,CAACE,KAAX,CAAiB,CAAjB,EAAoB,CAApB,CAAN,cAAgCF,UAAU,CAACE,KAAX,CACrC,CADqC,EAErC,EAFqC,CAAhC,cAGJF,UAAU,CAACE,KAAX,CAAiB,EAAjB,EAAqB,EAArB,CAHI,CAAT;AAIA;;AACJ,SAAK,YAAL;AACID,MAAAA,SAAS,aAAMD,UAAU,CAACE,KAAX,CAAiB,CAAjB,EAAoB,CAApB,CAAN,cAAgCF,UAAU,CAACE,KAAX,CACrC,CADqC,EAErC,EAFqC,CAAhC,cAGJF,UAAU,CAACE,KAAX,CAAiB,EAAjB,EAAqB,EAArB,CAHI,CAAT;AAIA;;AACJ;AACID,MAAAA,SAAS,aAAMD,UAAU,CAACE,KAAX,CAAiB,CAAjB,EAAoB,CAApB,CAAN,cAAgCF,UAAU,CAACE,KAAX,CACrC,CADqC,EAErC,CAFqC,CAAhC,cAGJF,UAAU,CAACE,KAAX,CAAiB,CAAjB,EAAoB,EAApB,CAHI,cAGuBF,UAAU,CAACE,KAAX,CAAiB,EAAjB,EAAqB,EAArB,CAHvB,CAAT;AAIA;AAlBR;;AAqBA,SAAOD,SAAS,CAACE,IAAV,EAAP;AACH;AAED,OAAO,SAASC,SAAT,CAAmBV,KAAnB,EAA0BW,SAA1B,EAAqD;AAAA,MAAhBC,SAAgB,uEAAJ,EAAI;AACxD,MAAMN,UAAU,GAAGP,WAAW,CAACC,KAAD,CAA9B;AACA,MAAIa,SAAS,GAAG,CAAhB;;AAEA,MAAID,SAAS,CAACE,MAAd,EAAsB;AAClB,QAAMX,MAAM,GAAGL,OAAO,CAACM,GAAR,CAAYC,QAAZ,CAAqBO,SAAS,CAACE,MAA/B,CAAf;AACAD,IAAAA,SAAS,GAAGV,MAAM,KAAK,MAAX,GAAoB,CAApB,GAAwB,CAApC;AACH;;AAED,SAAOG,UAAU,CAACE,KAAX,CAAiB,CAAjB,EAAoBK,SAApB,CAAP;AACH;AAED,OAAO,SAASE,oBAAT,CAA8Bf,KAA9B,EAAqC;AACxC,MAAMM,UAAU,GAAGP,WAAW,CAACC,KAAD,CAA9B;;AAEA,MAAIM,UAAU,CAACU,MAAX,IAAqB,CAAzB,EAA4B;AACxB,qBAAUV,UAAU,CAACE,KAAX,CAAiB,CAAjB,EAAoB,CAApB,CAAV,cAAoCF,UAAU,CAACE,KAAX,CAAiB,CAAjB,EAAoB,CAApB,CAApC;AACH;;AAED,SAAOF,UAAP;AACH;AAED,OAAO,SAASW,cAAT,CAAwBC,IAAxB,EAA8B;AACjC,SAAO,aAAYA,IAAZ,EAAkBC,GAAlB,CAAsB,UAAAC,CAAC;AAAA,qBAAOA,CAAP,eAAaF,IAAI,CAACE,CAAD,CAAjB;AAAA,GAAvB,CAAP;AACH","sourcesContent":["import Payment from \"payment\";\n\nfunction clearNumber(value = \"\") {\n    return value.replace(/\\D+/g, \"\");\n}\n\nexport function formatCreditCardNumber(value) {\n    if (!value) {\n        return value;\n    }\n\n    const issuer = Payment.fns.cardType(value);\n    const clearValue = clearNumber(value);\n    let nextValue;\n\n    switch (issuer) {\n        case \"amex\":\n            nextValue = `${clearValue.slice(0, 4)} ${clearValue.slice(\n                4,\n                10\n            )} ${clearValue.slice(10, 15)}`;\n            break;\n        case \"dinersclub\":\n            nextValue = `${clearValue.slice(0, 4)} ${clearValue.slice(\n                4,\n                10\n            )} ${clearValue.slice(10, 14)}`;\n            break;\n        default:\n            nextValue = `${clearValue.slice(0, 4)} ${clearValue.slice(\n                4,\n                8\n            )} ${clearValue.slice(8, 12)} ${clearValue.slice(12, 19)}`;\n            break;\n    }\n\n    return nextValue.trim();\n}\n\nexport function formatCVC(value, prevValue, allValues = {}) {\n    const clearValue = clearNumber(value);\n    let maxLength = 4;\n\n    if (allValues.number) {\n        const issuer = Payment.fns.cardType(allValues.number);\n        maxLength = issuer === \"amex\" ? 4 : 3;\n    }\n\n    return clearValue.slice(0, maxLength);\n}\n\nexport function formatExpirationDate(value) {\n    const clearValue = clearNumber(value);\n\n    if (clearValue.length >= 3) {\n        return `${clearValue.slice(0, 2)}/${clearValue.slice(2, 4)}`;\n    }\n\n    return clearValue;\n}\n\nexport function formatFormData(data) {\n    return Object.keys(data).map(d => `${d}: ${data[d]}`);\n}\n"]},"metadata":{},"sourceType":"module"}